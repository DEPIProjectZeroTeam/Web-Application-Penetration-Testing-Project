Security Vulnerability Report
Overview
This report identifies high-severity security vulnerabilities found in the web application at http://localhost:3000. These vulnerabilities range from SQL Injection to Cross-Site Scripting (XSS) and CSRF attacks, which could potentially allow unauthorized access, data leakage, and other forms of exploitation.

Each vulnerability is described with a proof of concept, a severity rating, and recommended remediation steps.

1. SQL Injection in Login Form
Severity: High

URL: http://localhost:3000/#/login

Description: An attacker can log in as the admin by injecting SQL code into the login form.

Proof of Concept:

Visit Login Page.

Enter ' OR 1=1 -- in the username field.

Enter anything in the password field.

Click the "Login" button.

Admin account is logged in successfully.

Remediation: Implement input validation and use parameterized queries to prevent SQL injection.

2. Stored XSS at the Comment Field in Contact Page
Severity: High

URL: http://localhost:3000/#/contact

Description: Malicious JavaScript can be injected into the comment field, leading to XSS attacks.

Proof of Concept:

Go to Contact Page.

Inject the payload <script>alert('XSS')</script> in the comment field.

Submit the comment and view the result in the about and administration pages.

Remediation: Sanitize and validate inputs in the comment field to block malicious scripts.

3. Business Logic Vulnerability in Adding Items to Basket
Severity: High

URL: http://localhost:3000/#/

Description: Attackers can manipulate the quantity of items to negative numbers, allowing them to receive money instead of paying.

Proof of Concept:

Add an item to the basket.

Intercept the request and change the item quantity to a negative number.

Proceed to checkout and receive a refund.

Remediation: Implement input validation to prevent negative values for item quantities.

4. SQL Injection to Retrieve All User Data
Severity: High

URL: http://localhost:3000/rest/products/search

Description: An attacker can retrieve all user data from the database using a SQL injection.

Proof of Concept:

Visit the product search URL.

Change the query parameter to test')) UNION SELECT id, email, password, ... FROM Users--.

All user data is displayed.

Remediation: Validate and sanitize user input for search queries.

5. Stored XSS in Email Field during Registration
Severity: High

URL: http://localhost:3000/#/register

Description: Malicious JavaScript injected into the email field during registration can steal admin cookies.

Proof of Concept:

Go to Registration Page.

Intercept the registration packet and modify the email field to inject JavaScript: "user@domain.com<script>alert('XSS')</script>".

Submit the form and log in as admin to see the alert.

Remediation: Validate and sanitize the email field to block script injections.

6. File Upload Vulnerability
Severity: High

URL: http://localhost:3000/#/complain

Description: Attackers can upload files of unsupported types.

Proof of Concept:

Go to the complain page and upload a .zip file.

Modify the packet to upload a file with a different extension.

The file is uploaded successfully.

Remediation: Enforce server-side validation for file uploads to ensure only supported file types are allowed.

7. CSRF Vulnerabilities
Severity: High

URLs:

Change Password

Profile Change

Description: CSRF vulnerabilities allow attackers to change the userâ€™s password or username without consent.

Proof of Concept:

Log in as a valid user.

Use Burp Suite to modify and resend requests to change the password or username.

A victim who clicks on a malicious link will trigger the change.

Remediation: Implement CSRF tokens to protect state-changing actions.

8. Blind SSRF Vulnerability
Severity: High

URL: http://localhost:3000/#/profile

Description: Users can trigger SSRF to download arbitrary content from the server.

Proof of Concept:

Go to the profile page and enter a URL that is not an image.

The server downloads content and makes it accessible.

Remediation: Validate the image URL parameter to ensure only image URLs are accepted.


